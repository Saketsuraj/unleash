/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PlaygroundStrategySchemaResultAnyOfEnabled } from './PlaygroundStrategySchemaResultAnyOfEnabled';
import {
    PlaygroundStrategySchemaResultAnyOfEnabledFromJSON,
    PlaygroundStrategySchemaResultAnyOfEnabledFromJSONTyped,
    PlaygroundStrategySchemaResultAnyOfEnabledToJSON,
} from './PlaygroundStrategySchemaResultAnyOfEnabled';

/**
 * 
 * @export
 * @interface PlaygroundStrategySchemaResultAnyOf
 */
export interface PlaygroundStrategySchemaResultAnyOf {
    /**
     * Signals that this strategy could not be evaluated. This is most likely because you're using a custom strategy that Unleash doesn't know about.
     * @type {string}
     * @memberof PlaygroundStrategySchemaResultAnyOf
     */
    evaluationStatus: PlaygroundStrategySchemaResultAnyOfEvaluationStatusEnum;
    /**
     * 
     * @type {PlaygroundStrategySchemaResultAnyOfEnabled}
     * @memberof PlaygroundStrategySchemaResultAnyOf
     */
    enabled: PlaygroundStrategySchemaResultAnyOfEnabled;
}


/**
 * @export
 */
export const PlaygroundStrategySchemaResultAnyOfEvaluationStatusEnum = {
    Incomplete: 'incomplete'
} as const;
export type PlaygroundStrategySchemaResultAnyOfEvaluationStatusEnum = typeof PlaygroundStrategySchemaResultAnyOfEvaluationStatusEnum[keyof typeof PlaygroundStrategySchemaResultAnyOfEvaluationStatusEnum];


/**
 * Check if a given object implements the PlaygroundStrategySchemaResultAnyOf interface.
 */
export function instanceOfPlaygroundStrategySchemaResultAnyOf(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "evaluationStatus" in value;
    isInstance = isInstance && "enabled" in value;

    return isInstance;
}

export function PlaygroundStrategySchemaResultAnyOfFromJSON(json: any): PlaygroundStrategySchemaResultAnyOf {
    return PlaygroundStrategySchemaResultAnyOfFromJSONTyped(json, false);
}

export function PlaygroundStrategySchemaResultAnyOfFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlaygroundStrategySchemaResultAnyOf {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'evaluationStatus': json['evaluationStatus'],
        'enabled': PlaygroundStrategySchemaResultAnyOfEnabledFromJSON(json['enabled']),
    };
}

export function PlaygroundStrategySchemaResultAnyOfToJSON(value?: PlaygroundStrategySchemaResultAnyOf | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'evaluationStatus': value.evaluationStatus,
        'enabled': PlaygroundStrategySchemaResultAnyOfEnabledToJSON(value.enabled),
    };
}

