/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SamlSettingsSchema
 */
export interface SamlSettingsSchema {
    /**
     * 
     * @type {boolean}
     * @memberof SamlSettingsSchema
     */
    enabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SamlSettingsSchema
     */
    entityId: string;
    /**
     * 
     * @type {string}
     * @memberof SamlSettingsSchema
     */
    signOnUrl: string;
    /**
     * 
     * @type {string}
     * @memberof SamlSettingsSchema
     */
    certificate: string;
    /**
     * 
     * @type {string}
     * @memberof SamlSettingsSchema
     */
    signOutUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof SamlSettingsSchema
     */
    spCertificate?: string;
    /**
     * 
     * @type {boolean}
     * @memberof SamlSettingsSchema
     */
    autoCreate?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SamlSettingsSchema
     */
    defaultRootRole?: SamlSettingsSchemaDefaultRootRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof SamlSettingsSchema
     */
    emailDomains?: string;
}


/**
 * @export
 */
export const SamlSettingsSchemaDefaultRootRoleEnum = {
    Viewer: 'Viewer',
    Editor: 'Editor',
    Admin: 'Admin'
} as const;
export type SamlSettingsSchemaDefaultRootRoleEnum = typeof SamlSettingsSchemaDefaultRootRoleEnum[keyof typeof SamlSettingsSchemaDefaultRootRoleEnum];


/**
 * Check if a given object implements the SamlSettingsSchema interface.
 */
export function instanceOfSamlSettingsSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "entityId" in value;
    isInstance = isInstance && "signOnUrl" in value;
    isInstance = isInstance && "certificate" in value;

    return isInstance;
}

export function SamlSettingsSchemaFromJSON(json: any): SamlSettingsSchema {
    return SamlSettingsSchemaFromJSONTyped(json, false);
}

export function SamlSettingsSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): SamlSettingsSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'entityId': json['entityId'],
        'signOnUrl': json['signOnUrl'],
        'certificate': json['certificate'],
        'signOutUrl': !exists(json, 'signOutUrl') ? undefined : json['signOutUrl'],
        'spCertificate': !exists(json, 'spCertificate') ? undefined : json['spCertificate'],
        'autoCreate': !exists(json, 'autoCreate') ? undefined : json['autoCreate'],
        'defaultRootRole': !exists(json, 'defaultRootRole') ? undefined : json['defaultRootRole'],
        'emailDomains': !exists(json, 'emailDomains') ? undefined : json['emailDomains'],
    };
}

export function SamlSettingsSchemaToJSON(value?: SamlSettingsSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'enabled': value.enabled,
        'entityId': value.entityId,
        'signOnUrl': value.signOnUrl,
        'certificate': value.certificate,
        'signOutUrl': value.signOutUrl,
        'spCertificate': value.spCertificate,
        'autoCreate': value.autoCreate,
        'defaultRootRole': value.defaultRootRole,
        'emailDomains': value.emailDomains,
    };
}

