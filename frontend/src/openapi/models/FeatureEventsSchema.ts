/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EventSchema } from './EventSchema';
import {
    EventSchemaFromJSON,
    EventSchemaFromJSONTyped,
    EventSchemaToJSON,
} from './EventSchema';

/**
 * 
 * @export
 * @interface FeatureEventsSchema
 */
export interface FeatureEventsSchema {
    /**
     * 
     * @type {number}
     * @memberof FeatureEventsSchema
     */
    version?: number;
    /**
     * 
     * @type {string}
     * @memberof FeatureEventsSchema
     */
    toggleName?: string;
    /**
     * 
     * @type {Array<EventSchema>}
     * @memberof FeatureEventsSchema
     */
    events: Array<EventSchema>;
}

/**
 * Check if a given object implements the FeatureEventsSchema interface.
 */
export function instanceOfFeatureEventsSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "events" in value;

    return isInstance;
}

export function FeatureEventsSchemaFromJSON(json: any): FeatureEventsSchema {
    return FeatureEventsSchemaFromJSONTyped(json, false);
}

export function FeatureEventsSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): FeatureEventsSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'version': !exists(json, 'version') ? undefined : json['version'],
        'toggleName': !exists(json, 'toggleName') ? undefined : json['toggleName'],
        'events': ((json['events'] as Array<any>).map(EventSchemaFromJSON)),
    };
}

export function FeatureEventsSchemaToJSON(value?: FeatureEventsSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'version': value.version,
        'toggleName': value.toggleName,
        'events': ((value.events as Array<any>).map(EventSchemaToJSON)),
    };
}

