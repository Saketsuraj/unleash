/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface OidcSettingsSchema
 */
export interface OidcSettingsSchema {
    /**
     * 
     * @type {boolean}
     * @memberof OidcSettingsSchema
     */
    enabled?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OidcSettingsSchema
     */
    discoverUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcSettingsSchema
     */
    clientId: string;
    /**
     * 
     * @type {string}
     * @memberof OidcSettingsSchema
     */
    secret: string;
    /**
     * 
     * @type {boolean}
     * @memberof OidcSettingsSchema
     */
    autoCreate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OidcSettingsSchema
     */
    enableSingleSignOut?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OidcSettingsSchema
     */
    defaultRootRole?: OidcSettingsSchemaDefaultRootRoleEnum;
    /**
     * 
     * @type {string}
     * @memberof OidcSettingsSchema
     */
    emailDomains?: string;
    /**
     * 
     * @type {string}
     * @memberof OidcSettingsSchema
     */
    acrValues?: string;
}


/**
 * @export
 */
export const OidcSettingsSchemaDefaultRootRoleEnum = {
    Viewer: 'Viewer',
    Editor: 'Editor',
    Admin: 'Admin'
} as const;
export type OidcSettingsSchemaDefaultRootRoleEnum = typeof OidcSettingsSchemaDefaultRootRoleEnum[keyof typeof OidcSettingsSchemaDefaultRootRoleEnum];


/**
 * Check if a given object implements the OidcSettingsSchema interface.
 */
export function instanceOfOidcSettingsSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "clientId" in value;
    isInstance = isInstance && "secret" in value;

    return isInstance;
}

export function OidcSettingsSchemaFromJSON(json: any): OidcSettingsSchema {
    return OidcSettingsSchemaFromJSONTyped(json, false);
}

export function OidcSettingsSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): OidcSettingsSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'discoverUrl': !exists(json, 'discoverUrl') ? undefined : json['discoverUrl'],
        'clientId': json['clientId'],
        'secret': json['secret'],
        'autoCreate': !exists(json, 'autoCreate') ? undefined : json['autoCreate'],
        'enableSingleSignOut': !exists(json, 'enableSingleSignOut') ? undefined : json['enableSingleSignOut'],
        'defaultRootRole': !exists(json, 'defaultRootRole') ? undefined : json['defaultRootRole'],
        'emailDomains': !exists(json, 'emailDomains') ? undefined : json['emailDomains'],
        'acrValues': !exists(json, 'acrValues') ? undefined : json['acrValues'],
    };
}

export function OidcSettingsSchemaToJSON(value?: OidcSettingsSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'enabled': value.enabled,
        'discoverUrl': value.discoverUrl,
        'clientId': value.clientId,
        'secret': value.secret,
        'autoCreate': value.autoCreate,
        'enableSingleSignOut': value.enableSingleSignOut,
        'defaultRootRole': value.defaultRootRole,
        'emailDomains': value.emailDomains,
        'acrValues': value.acrValues,
    };
}

