/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PlaygroundFeatureSchemaStrategies } from './PlaygroundFeatureSchemaStrategies';
import {
    PlaygroundFeatureSchemaStrategiesFromJSON,
    PlaygroundFeatureSchemaStrategiesFromJSONTyped,
    PlaygroundFeatureSchemaStrategiesToJSON,
} from './PlaygroundFeatureSchemaStrategies';
import type { PlaygroundFeatureSchemaVariant } from './PlaygroundFeatureSchemaVariant';
import {
    PlaygroundFeatureSchemaVariantFromJSON,
    PlaygroundFeatureSchemaVariantFromJSONTyped,
    PlaygroundFeatureSchemaVariantToJSON,
} from './PlaygroundFeatureSchemaVariant';
import type { VariantSchema } from './VariantSchema';
import {
    VariantSchemaFromJSON,
    VariantSchemaFromJSONTyped,
    VariantSchemaToJSON,
} from './VariantSchema';

/**
 * A simplified feature toggle model intended for the Unleash playground.
 * @export
 * @interface PlaygroundFeatureSchema
 */
export interface PlaygroundFeatureSchema {
    /**
     * The feature's name.
     * @type {string}
     * @memberof PlaygroundFeatureSchema
     */
    name: string;
    /**
     * The ID of the project that contains this feature.
     * @type {string}
     * @memberof PlaygroundFeatureSchema
     */
    projectId: string;
    /**
     * 
     * @type {PlaygroundFeatureSchemaStrategies}
     * @memberof PlaygroundFeatureSchema
     */
    strategies: PlaygroundFeatureSchemaStrategies;
    /**
     * Whether the feature is active and would be evaluated in the provided environment in a normal SDK context.
     * @type {boolean}
     * @memberof PlaygroundFeatureSchema
     */
    isEnabledInCurrentEnvironment: boolean;
    /**
     * Whether this feature is enabled or not in the current environment.
     *                           If a feature can't be fully evaluated (that is, `strategies.result` is `unknown`),
     *                           this will be `false` to align with how client SDKs treat unresolved feature states.
     * @type {boolean}
     * @memberof PlaygroundFeatureSchema
     */
    isEnabled: boolean;
    /**
     * 
     * @type {PlaygroundFeatureSchemaVariant}
     * @memberof PlaygroundFeatureSchema
     */
    variant: PlaygroundFeatureSchemaVariant | null;
    /**
     * 
     * @type {Array<VariantSchema>}
     * @memberof PlaygroundFeatureSchema
     */
    variants: Array<VariantSchema>;
}

/**
 * Check if a given object implements the PlaygroundFeatureSchema interface.
 */
export function instanceOfPlaygroundFeatureSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "projectId" in value;
    isInstance = isInstance && "strategies" in value;
    isInstance = isInstance && "isEnabledInCurrentEnvironment" in value;
    isInstance = isInstance && "isEnabled" in value;
    isInstance = isInstance && "variant" in value;
    isInstance = isInstance && "variants" in value;

    return isInstance;
}

export function PlaygroundFeatureSchemaFromJSON(json: any): PlaygroundFeatureSchema {
    return PlaygroundFeatureSchemaFromJSONTyped(json, false);
}

export function PlaygroundFeatureSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlaygroundFeatureSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'projectId': json['projectId'],
        'strategies': PlaygroundFeatureSchemaStrategiesFromJSON(json['strategies']),
        'isEnabledInCurrentEnvironment': json['isEnabledInCurrentEnvironment'],
        'isEnabled': json['isEnabled'],
        'variant': PlaygroundFeatureSchemaVariantFromJSON(json['variant']),
        'variants': ((json['variants'] as Array<any>).map(VariantSchemaFromJSON)),
    };
}

export function PlaygroundFeatureSchemaToJSON(value?: PlaygroundFeatureSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'projectId': value.projectId,
        'strategies': PlaygroundFeatureSchemaStrategiesToJSON(value.strategies),
        'isEnabledInCurrentEnvironment': value.isEnabledInCurrentEnvironment,
        'isEnabled': value.isEnabled,
        'variant': PlaygroundFeatureSchemaVariantToJSON(value.variant),
        'variants': ((value.variants as Array<any>).map(VariantSchemaToJSON)),
    };
}

