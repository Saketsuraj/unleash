/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PlaygroundFeatureSchemaVariantPayload } from './PlaygroundFeatureSchemaVariantPayload';
import {
    PlaygroundFeatureSchemaVariantPayloadFromJSON,
    PlaygroundFeatureSchemaVariantPayloadFromJSONTyped,
    PlaygroundFeatureSchemaVariantPayloadToJSON,
} from './PlaygroundFeatureSchemaVariantPayload';

/**
 * The feature variant you receive based on the provided context or the _disabled
 *                           variant_. If a feature is disabled or doesn't have any
 *                           variants, you would get the _disabled variant_.
 *                           Otherwise, you'll get one of thefeature's defined variants.
 * @export
 * @interface PlaygroundFeatureSchemaVariant
 */
export interface PlaygroundFeatureSchemaVariant {
    /**
     * The variant's name. If there is no variant or if the toggle is disabled, this will be `disabled`
     * @type {string}
     * @memberof PlaygroundFeatureSchemaVariant
     */
    name: string;
    /**
     * Whether the variant is enabled or not. If the feature is disabled or if it doesn't have variants, this property will be `false`
     * @type {boolean}
     * @memberof PlaygroundFeatureSchemaVariant
     */
    enabled: boolean;
    /**
     * 
     * @type {PlaygroundFeatureSchemaVariantPayload}
     * @memberof PlaygroundFeatureSchemaVariant
     */
    payload?: PlaygroundFeatureSchemaVariantPayload;
}

/**
 * Check if a given object implements the PlaygroundFeatureSchemaVariant interface.
 */
export function instanceOfPlaygroundFeatureSchemaVariant(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "enabled" in value;

    return isInstance;
}

export function PlaygroundFeatureSchemaVariantFromJSON(json: any): PlaygroundFeatureSchemaVariant {
    return PlaygroundFeatureSchemaVariantFromJSONTyped(json, false);
}

export function PlaygroundFeatureSchemaVariantFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlaygroundFeatureSchemaVariant {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'enabled': json['enabled'],
        'payload': !exists(json, 'payload') ? undefined : PlaygroundFeatureSchemaVariantPayloadFromJSON(json['payload']),
    };
}

export function PlaygroundFeatureSchemaVariantToJSON(value?: PlaygroundFeatureSchemaVariant | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'enabled': value.enabled,
        'payload': PlaygroundFeatureSchemaVariantPayloadToJSON(value.payload),
    };
}

