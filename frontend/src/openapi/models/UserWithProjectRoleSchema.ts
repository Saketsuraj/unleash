/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserWithProjectRoleSchema
 */
export interface UserWithProjectRoleSchema {
    /**
     * 
     * @type {boolean}
     * @memberof UserWithProjectRoleSchema
     */
    isAPI: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserWithProjectRoleSchema
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserWithProjectRoleSchema
     */
    email?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserWithProjectRoleSchema
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UserWithProjectRoleSchema
     */
    imageUrl?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof UserWithProjectRoleSchema
     */
    addedAt?: Date;
    /**
     * 
     * @type {number}
     * @memberof UserWithProjectRoleSchema
     */
    roleId?: number;
}

/**
 * Check if a given object implements the UserWithProjectRoleSchema interface.
 */
export function instanceOfUserWithProjectRoleSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "isAPI" in value;
    isInstance = isInstance && "id" in value;

    return isInstance;
}

export function UserWithProjectRoleSchemaFromJSON(json: any): UserWithProjectRoleSchema {
    return UserWithProjectRoleSchemaFromJSONTyped(json, false);
}

export function UserWithProjectRoleSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserWithProjectRoleSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'isAPI': json['isAPI'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'id': json['id'],
        'imageUrl': !exists(json, 'imageUrl') ? undefined : json['imageUrl'],
        'addedAt': !exists(json, 'addedAt') ? undefined : (new Date(json['addedAt'])),
        'roleId': !exists(json, 'roleId') ? undefined : json['roleId'],
    };
}

export function UserWithProjectRoleSchemaToJSON(value?: UserWithProjectRoleSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'isAPI': value.isAPI,
        'name': value.name,
        'email': value.email,
        'id': value.id,
        'imageUrl': value.imageUrl,
        'addedAt': value.addedAt === undefined ? undefined : (value.addedAt.toISOString()),
        'roleId': value.roleId,
    };
}

