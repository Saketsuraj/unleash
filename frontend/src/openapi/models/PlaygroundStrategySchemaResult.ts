/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PlaygroundStrategySchemaResultAnyOf } from './PlaygroundStrategySchemaResultAnyOf';
import {
    PlaygroundStrategySchemaResultAnyOfFromJSON,
    PlaygroundStrategySchemaResultAnyOfFromJSONTyped,
    PlaygroundStrategySchemaResultAnyOfToJSON,
} from './PlaygroundStrategySchemaResultAnyOf';
import type { PlaygroundStrategySchemaResultAnyOf1 } from './PlaygroundStrategySchemaResultAnyOf1';
import {
    PlaygroundStrategySchemaResultAnyOf1FromJSON,
    PlaygroundStrategySchemaResultAnyOf1FromJSONTyped,
    PlaygroundStrategySchemaResultAnyOf1ToJSON,
} from './PlaygroundStrategySchemaResultAnyOf1';

/**
 * The strategy's evaluation result. If the strategy is a custom strategy that Unleash can't evaluate, `evaluationStatus` will be `unknown`. Otherwise, it will be `true` or `false`
 * @export
 * @interface PlaygroundStrategySchemaResult
 */
export interface PlaygroundStrategySchemaResult {
    /**
     * Signals that this strategy was evaluated successfully.
     * @type {string}
     * @memberof PlaygroundStrategySchemaResult
     */
    evaluationStatus: PlaygroundStrategySchemaResultEvaluationStatusEnum;
    /**
     * Whether this strategy evaluates to true or not.
     * @type {boolean}
     * @memberof PlaygroundStrategySchemaResult
     */
    enabled: boolean;
}


/**
 * @export
 */
export const PlaygroundStrategySchemaResultEvaluationStatusEnum = {
    Complete: 'complete'
} as const;
export type PlaygroundStrategySchemaResultEvaluationStatusEnum = typeof PlaygroundStrategySchemaResultEvaluationStatusEnum[keyof typeof PlaygroundStrategySchemaResultEvaluationStatusEnum];


/**
 * Check if a given object implements the PlaygroundStrategySchemaResult interface.
 */
export function instanceOfPlaygroundStrategySchemaResult(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "evaluationStatus" in value;
    isInstance = isInstance && "enabled" in value;

    return isInstance;
}

export function PlaygroundStrategySchemaResultFromJSON(json: any): PlaygroundStrategySchemaResult {
    return PlaygroundStrategySchemaResultFromJSONTyped(json, false);
}

export function PlaygroundStrategySchemaResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlaygroundStrategySchemaResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'evaluationStatus': json['evaluationStatus'],
        'enabled': json['enabled'],
    };
}

export function PlaygroundStrategySchemaResultToJSON(value?: PlaygroundStrategySchemaResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'evaluationStatus': value.evaluationStatus,
        'enabled': value.enabled,
    };
}

