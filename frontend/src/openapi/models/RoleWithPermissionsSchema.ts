/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AdminPermissionSchema } from './AdminPermissionSchema';
import {
    AdminPermissionSchemaFromJSON,
    AdminPermissionSchemaFromJSONTyped,
    AdminPermissionSchemaToJSON,
} from './AdminPermissionSchema';

/**
 * 
 * @export
 * @interface RoleWithPermissionsSchema
 */
export interface RoleWithPermissionsSchema {
    /**
     * 
     * @type {number}
     * @memberof RoleWithPermissionsSchema
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof RoleWithPermissionsSchema
     */
    type: string;
    /**
     * 
     * @type {string}
     * @memberof RoleWithPermissionsSchema
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof RoleWithPermissionsSchema
     */
    description?: string;
    /**
     * 
     * @type {Array<AdminPermissionSchema>}
     * @memberof RoleWithPermissionsSchema
     */
    permissions: Array<AdminPermissionSchema>;
}

/**
 * Check if a given object implements the RoleWithPermissionsSchema interface.
 */
export function instanceOfRoleWithPermissionsSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "permissions" in value;

    return isInstance;
}

export function RoleWithPermissionsSchemaFromJSON(json: any): RoleWithPermissionsSchema {
    return RoleWithPermissionsSchemaFromJSONTyped(json, false);
}

export function RoleWithPermissionsSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): RoleWithPermissionsSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'type': json['type'],
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'permissions': ((json['permissions'] as Array<any>).map(AdminPermissionSchemaFromJSON)),
    };
}

export function RoleWithPermissionsSchemaToJSON(value?: RoleWithPermissionsSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'type': value.type,
        'name': value.name,
        'description': value.description,
        'permissions': ((value.permissions as Array<any>).map(AdminPermissionSchemaToJSON)),
    };
}

