/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 *         Search for events by type, project, feature, free-text query,
 *         or a combination thereof. Pass an empty object to fetch all events.
 *     
 * @export
 * @interface SearchEventsSchema
 */
export interface SearchEventsSchema {
    /**
     * Find events by event type (case-sensitive).
     * @type {string}
     * @memberof SearchEventsSchema
     */
    type?: string;
    /**
     * Find events by project ID (case-sensitive).
     * @type {string}
     * @memberof SearchEventsSchema
     */
    project?: string;
    /**
     * Find events by feature toggle name (case-sensitive).
     * @type {string}
     * @memberof SearchEventsSchema
     */
    feature?: string;
    /**
     * 
     *                 Find events by a free-text search query.
     *                 The query will be matched against the event type,
     *                 the username or email that created the event (if any),
     *                 and the event data payload (if any).
     *             
     * @type {string}
     * @memberof SearchEventsSchema
     */
    query?: string;
    /**
     * 
     * @type {number}
     * @memberof SearchEventsSchema
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof SearchEventsSchema
     */
    offset?: number;
}

/**
 * Check if a given object implements the SearchEventsSchema interface.
 */
export function instanceOfSearchEventsSchema(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SearchEventsSchemaFromJSON(json: any): SearchEventsSchema {
    return SearchEventsSchemaFromJSONTyped(json, false);
}

export function SearchEventsSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): SearchEventsSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': !exists(json, 'type') ? undefined : json['type'],
        'project': !exists(json, 'project') ? undefined : json['project'],
        'feature': !exists(json, 'feature') ? undefined : json['feature'],
        'query': !exists(json, 'query') ? undefined : json['query'],
        'limit': !exists(json, 'limit') ? undefined : json['limit'],
        'offset': !exists(json, 'offset') ? undefined : json['offset'],
    };
}

export function SearchEventsSchemaToJSON(value?: SearchEventsSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'project': value.project,
        'feature': value.feature,
        'query': value.query,
        'limit': value.limit,
        'offset': value.offset,
    };
}

