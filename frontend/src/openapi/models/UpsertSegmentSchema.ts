/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ConstraintSchema } from './ConstraintSchema';
import {
    ConstraintSchemaFromJSON,
    ConstraintSchemaFromJSONTyped,
    ConstraintSchemaToJSON,
} from './ConstraintSchema';

/**
 * 
 * @export
 * @interface UpsertSegmentSchema
 */
export interface UpsertSegmentSchema {
    /**
     * 
     * @type {string}
     * @memberof UpsertSegmentSchema
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UpsertSegmentSchema
     */
    description?: string | null;
    /**
     * 
     * @type {Array<ConstraintSchema>}
     * @memberof UpsertSegmentSchema
     */
    constraints: Array<ConstraintSchema>;
}

/**
 * Check if a given object implements the UpsertSegmentSchema interface.
 */
export function instanceOfUpsertSegmentSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "constraints" in value;

    return isInstance;
}

export function UpsertSegmentSchemaFromJSON(json: any): UpsertSegmentSchema {
    return UpsertSegmentSchemaFromJSONTyped(json, false);
}

export function UpsertSegmentSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): UpsertSegmentSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'constraints': ((json['constraints'] as Array<any>).map(ConstraintSchemaFromJSON)),
    };
}

export function UpsertSegmentSchemaToJSON(value?: UpsertSegmentSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'description': value.description,
        'constraints': ((value.constraints as Array<any>).map(ConstraintSchemaToJSON)),
    };
}

