/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * A strategy constraint. For more information, refer to [the strategy constraint reference documentation](https://docs.getunleash.io/advanced/strategy_constraints)
 * @export
 * @interface ConstraintSchema
 */
export interface ConstraintSchema {
    /**
     * The name of the context field that this constraint should apply to.
     * @type {string}
     * @memberof ConstraintSchema
     */
    contextName: string;
    /**
     * The operator to use when evaluating this constraint. For more information about the various operators, refer to [the strategy constraint operator documentation](https://docs.getunleash.io/advanced/strategy_constraints#strategy-constraint-operators).
     * @type {string}
     * @memberof ConstraintSchema
     */
    operator: ConstraintSchemaOperatorEnum;
    /**
     * Whether the operator should be case sensitive or not. Defaults to `false` (being case sensitive).
     * @type {boolean}
     * @memberof ConstraintSchema
     */
    caseInsensitive?: boolean;
    /**
     * Whether the result should be negated or not. If `true`, will turn a `true` result into a `false` result and vice versa.
     * @type {boolean}
     * @memberof ConstraintSchema
     */
    inverted?: boolean;
    /**
     * The context values that should be used for constraint evaluation. Use this property instead of `value` for properties that accept multiple values.
     * @type {Array<string>}
     * @memberof ConstraintSchema
     */
    values?: Array<string>;
    /**
     * The context value that should be used for constraint evaluation. Use this property instead of `values` for properties that only accept single values.
     * @type {string}
     * @memberof ConstraintSchema
     */
    value?: string;
}


/**
 * @export
 */
export const ConstraintSchemaOperatorEnum = {
    NotIn: 'NOT_IN',
    In: 'IN',
    StrEndsWith: 'STR_ENDS_WITH',
    StrStartsWith: 'STR_STARTS_WITH',
    StrContains: 'STR_CONTAINS',
    NumEq: 'NUM_EQ',
    NumGt: 'NUM_GT',
    NumGte: 'NUM_GTE',
    NumLt: 'NUM_LT',
    NumLte: 'NUM_LTE',
    DateAfter: 'DATE_AFTER',
    DateBefore: 'DATE_BEFORE',
    SemverEq: 'SEMVER_EQ',
    SemverGt: 'SEMVER_GT',
    SemverLt: 'SEMVER_LT'
} as const;
export type ConstraintSchemaOperatorEnum = typeof ConstraintSchemaOperatorEnum[keyof typeof ConstraintSchemaOperatorEnum];


/**
 * Check if a given object implements the ConstraintSchema interface.
 */
export function instanceOfConstraintSchema(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "contextName" in value;
    isInstance = isInstance && "operator" in value;

    return isInstance;
}

export function ConstraintSchemaFromJSON(json: any): ConstraintSchema {
    return ConstraintSchemaFromJSONTyped(json, false);
}

export function ConstraintSchemaFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConstraintSchema {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'contextName': json['contextName'],
        'operator': json['operator'],
        'caseInsensitive': !exists(json, 'caseInsensitive') ? undefined : json['caseInsensitive'],
        'inverted': !exists(json, 'inverted') ? undefined : json['inverted'],
        'values': !exists(json, 'values') ? undefined : json['values'],
        'value': !exists(json, 'value') ? undefined : json['value'],
    };
}

export function ConstraintSchemaToJSON(value?: ConstraintSchema | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'contextName': value.contextName,
        'operator': value.operator,
        'caseInsensitive': value.caseInsensitive,
        'inverted': value.inverted,
        'values': value.values,
        'value': value.value,
    };
}

