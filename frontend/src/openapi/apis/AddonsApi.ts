/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddonSchema,
  AddonsSchema,
} from '../models';
import {
    AddonSchemaFromJSON,
    AddonSchemaToJSON,
    AddonsSchemaFromJSON,
    AddonsSchemaToJSON,
} from '../models';

export interface CreateAddonRequest {
    addonSchema: AddonSchema;
}

export interface DeleteAddonRequest {
    id: string;
}

export interface GetAddonRequest {
    id: string;
}

export interface UpdateAddonRequest {
    id: string;
    addonSchema: AddonSchema;
}

/**
 * 
 */
export class AddonsApi extends runtime.BaseAPI {

    /**
     */
    async createAddonRaw(requestParameters: CreateAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddonSchema>> {
        if (requestParameters.addonSchema === null || requestParameters.addonSchema === undefined) {
            throw new runtime.RequiredError('addonSchema','Required parameter requestParameters.addonSchema was null or undefined when calling createAddon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/addons`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddonSchemaToJSON(requestParameters.addonSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddonSchemaFromJSON(jsonValue));
    }

    /**
     */
    async createAddon(requestParameters: CreateAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddonSchema> {
        const response = await this.createAddonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteAddonRaw(requestParameters: DeleteAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteAddon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/addons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteAddon(requestParameters: DeleteAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteAddonRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAddonRaw(requestParameters: GetAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddonSchema>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAddon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/addons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddonSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getAddon(requestParameters: GetAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddonSchema> {
        const response = await this.getAddonRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAddonsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddonsSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/addons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddonsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getAddons(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddonsSchema> {
        const response = await this.getAddonsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateAddonRaw(requestParameters: UpdateAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AddonSchema>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateAddon.');
        }

        if (requestParameters.addonSchema === null || requestParameters.addonSchema === undefined) {
            throw new runtime.RequiredError('addonSchema','Required parameter requestParameters.addonSchema was null or undefined when calling updateAddon.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/addons/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AddonSchemaToJSON(requestParameters.addonSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AddonSchemaFromJSON(jsonValue));
    }

    /**
     */
    async updateAddon(requestParameters: UpdateAddonRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AddonSchema> {
        const response = await this.updateAddonRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
