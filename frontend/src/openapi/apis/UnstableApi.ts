/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ProxyClientSchema,
  ProxyFeaturesSchema,
  ProxyMetricsSchema,
} from '../models';
import {
    ProxyClientSchemaFromJSON,
    ProxyClientSchemaToJSON,
    ProxyFeaturesSchemaFromJSON,
    ProxyFeaturesSchemaToJSON,
    ProxyMetricsSchemaFromJSON,
    ProxyMetricsSchemaToJSON,
} from '../models';

export interface RegisterFrontendClientRequest {
    proxyClientSchema: ProxyClientSchema;
}

export interface RegisterFrontendMetricsRequest {
    proxyMetricsSchema: ProxyMetricsSchema;
}

/**
 * 
 */
export class UnstableApi extends runtime.BaseAPI {

    /**
     */
    async getFrontendFeaturesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProxyFeaturesSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/frontend`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProxyFeaturesSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getFrontendFeatures(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProxyFeaturesSchema> {
        const response = await this.getFrontendFeaturesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async registerFrontendClientRaw(requestParameters: RegisterFrontendClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.proxyClientSchema === null || requestParameters.proxyClientSchema === undefined) {
            throw new runtime.RequiredError('proxyClientSchema','Required parameter requestParameters.proxyClientSchema was null or undefined when calling registerFrontendClient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/frontend/client/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProxyClientSchemaToJSON(requestParameters.proxyClientSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registerFrontendClient(requestParameters: RegisterFrontendClientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerFrontendClientRaw(requestParameters, initOverrides);
    }

    /**
     */
    async registerFrontendMetricsRaw(requestParameters: RegisterFrontendMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.proxyMetricsSchema === null || requestParameters.proxyMetricsSchema === undefined) {
            throw new runtime.RequiredError('proxyMetricsSchema','Required parameter requestParameters.proxyMetricsSchema was null or undefined when calling registerFrontendMetrics.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/frontend/client/metrics`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProxyMetricsSchemaToJSON(requestParameters.proxyMetricsSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async registerFrontendMetrics(requestParameters: RegisterFrontendMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerFrontendMetricsRaw(requestParameters, initOverrides);
    }

}
