/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CloneFeatureSchema,
  ConstraintSchema,
  CreateFeatureSchema,
  CreateFeatureStrategySchema,
  FeatureEnvironmentSchema,
  FeatureSchema,
  FeatureStrategySchema,
  FeatureTypesSchema,
  FeatureVariantsSchema,
  FeaturesSchema,
  PatchSchema,
  SetStrategySortOrderSchemaInner,
  TagSchema,
  TagsSchema,
  UpdateFeatureSchema,
  UpdateFeatureStrategySchema,
  VariantSchema,
} from '../models';
import {
    CloneFeatureSchemaFromJSON,
    CloneFeatureSchemaToJSON,
    ConstraintSchemaFromJSON,
    ConstraintSchemaToJSON,
    CreateFeatureSchemaFromJSON,
    CreateFeatureSchemaToJSON,
    CreateFeatureStrategySchemaFromJSON,
    CreateFeatureStrategySchemaToJSON,
    FeatureEnvironmentSchemaFromJSON,
    FeatureEnvironmentSchemaToJSON,
    FeatureSchemaFromJSON,
    FeatureSchemaToJSON,
    FeatureStrategySchemaFromJSON,
    FeatureStrategySchemaToJSON,
    FeatureTypesSchemaFromJSON,
    FeatureTypesSchemaToJSON,
    FeatureVariantsSchemaFromJSON,
    FeatureVariantsSchemaToJSON,
    FeaturesSchemaFromJSON,
    FeaturesSchemaToJSON,
    PatchSchemaFromJSON,
    PatchSchemaToJSON,
    SetStrategySortOrderSchemaInnerFromJSON,
    SetStrategySortOrderSchemaInnerToJSON,
    TagSchemaFromJSON,
    TagSchemaToJSON,
    TagsSchemaFromJSON,
    TagsSchemaToJSON,
    UpdateFeatureSchemaFromJSON,
    UpdateFeatureSchemaToJSON,
    UpdateFeatureStrategySchemaFromJSON,
    UpdateFeatureStrategySchemaToJSON,
    VariantSchemaFromJSON,
    VariantSchemaToJSON,
} from '../models';

export interface AddFeatureStrategyRequest {
    projectId: string;
    featureName: string;
    environment: string;
    createFeatureStrategySchema: CreateFeatureStrategySchema;
}

export interface AddTagRequest {
    featureName: string;
    tagSchema: TagSchema;
}

export interface ArchiveFeatureRequest {
    projectId: string;
    featureName: string;
}

export interface CloneFeatureRequest {
    projectId: string;
    featureName: string;
    cloneFeatureSchema: CloneFeatureSchema;
}

export interface CreateFeatureRequest {
    projectId: string;
    createFeatureSchema: CreateFeatureSchema;
}

export interface DeleteFeatureStrategyRequest {
    projectId: string;
    featureName: string;
    environment: string;
    strategyId: string;
}

export interface GetFeatureRequest {
    projectId: string;
    featureName: string;
}

export interface GetFeatureEnvironmentRequest {
    projectId: string;
    featureName: string;
    environment: string;
}

export interface GetFeatureStrategiesRequest {
    projectId: string;
    featureName: string;
    environment: string;
}

export interface GetFeatureStrategyRequest {
    projectId: string;
    featureName: string;
    environment: string;
    strategyId: string;
}

export interface GetFeatureVariantsRequest {
    projectId: string;
    featureName: string;
}

export interface GetFeaturesRequest {
    projectId: string;
}

export interface ListTagsRequest {
    featureName: string;
}

export interface OverwriteFeatureVariantsRequest {
    projectId: string;
    featureName: string;
    variantSchema: Array<VariantSchema>;
}

export interface PatchFeatureRequest {
    projectId: string;
    featureName: string;
    patchSchema: Array<PatchSchema>;
}

export interface PatchFeatureStrategyRequest {
    projectId: string;
    featureName: string;
    environment: string;
    strategyId: string;
    patchSchema: Array<PatchSchema>;
}

export interface PatchFeatureVariantsRequest {
    projectId: string;
    featureName: string;
    patchSchema: Array<PatchSchema>;
}

export interface RemoveTagRequest {
    featureName: string;
    type: string;
    value: string;
}

export interface SetStrategySortOrderRequest {
    projectId: string;
    featureName: string;
    environment: string;
    setStrategySortOrderSchemaInner: Array<SetStrategySortOrderSchemaInner>;
}

export interface ToggleFeatureEnvironmentOffRequest {
    projectId: string;
    featureName: string;
    environment: string;
}

export interface ToggleFeatureEnvironmentOnRequest {
    projectId: string;
    featureName: string;
    environment: string;
}

export interface UpdateFeatureRequest {
    projectId: string;
    featureName: string;
    updateFeatureSchema: UpdateFeatureSchema;
}

export interface UpdateFeatureStrategyRequest {
    projectId: string;
    featureName: string;
    environment: string;
    strategyId: string;
    updateFeatureStrategySchema: UpdateFeatureStrategySchema;
}

export interface ValidateConstraintRequest {
    constraintSchema: ConstraintSchema;
}

/**
 * 
 */
export class FeaturesApi extends runtime.BaseAPI {

    /**
     */
    async addFeatureStrategyRaw(requestParameters: AddFeatureStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureStrategySchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling addFeatureStrategy.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling addFeatureStrategy.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling addFeatureStrategy.');
        }

        if (requestParameters.createFeatureStrategySchema === null || requestParameters.createFeatureStrategySchema === undefined) {
            throw new runtime.RequiredError('createFeatureStrategySchema','Required parameter requestParameters.createFeatureStrategySchema was null or undefined when calling addFeatureStrategy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFeatureStrategySchemaToJSON(requestParameters.createFeatureStrategySchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureStrategySchemaFromJSON(jsonValue));
    }

    /**
     */
    async addFeatureStrategy(requestParameters: AddFeatureStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureStrategySchema> {
        const response = await this.addFeatureStrategyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async addTagRaw(requestParameters: AddTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagSchema>> {
        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling addTag.');
        }

        if (requestParameters.tagSchema === null || requestParameters.tagSchema === undefined) {
            throw new runtime.RequiredError('tagSchema','Required parameter requestParameters.tagSchema was null or undefined when calling addTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/features/{featureName}/tags`.replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagSchemaToJSON(requestParameters.tagSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagSchemaFromJSON(jsonValue));
    }

    /**
     */
    async addTag(requestParameters: AddTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagSchema> {
        const response = await this.addTagRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async archiveFeatureRaw(requestParameters: ArchiveFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling archiveFeature.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling archiveFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async archiveFeature(requestParameters: ArchiveFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.archiveFeatureRaw(requestParameters, initOverrides);
    }

    /**
     */
    async cloneFeatureRaw(requestParameters: CloneFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureSchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling cloneFeature.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling cloneFeature.');
        }

        if (requestParameters.cloneFeatureSchema === null || requestParameters.cloneFeatureSchema === undefined) {
            throw new runtime.RequiredError('cloneFeatureSchema','Required parameter requestParameters.cloneFeatureSchema was null or undefined when calling cloneFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}/clone`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CloneFeatureSchemaToJSON(requestParameters.cloneFeatureSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureSchemaFromJSON(jsonValue));
    }

    /**
     */
    async cloneFeature(requestParameters: CloneFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureSchema> {
        const response = await this.cloneFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createFeatureRaw(requestParameters: CreateFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureSchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling createFeature.');
        }

        if (requestParameters.createFeatureSchema === null || requestParameters.createFeatureSchema === undefined) {
            throw new runtime.RequiredError('createFeatureSchema','Required parameter requestParameters.createFeatureSchema was null or undefined when calling createFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateFeatureSchemaToJSON(requestParameters.createFeatureSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureSchemaFromJSON(jsonValue));
    }

    /**
     */
    async createFeature(requestParameters: CreateFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureSchema> {
        const response = await this.createFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteFeatureStrategyRaw(requestParameters: DeleteFeatureStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling deleteFeatureStrategy.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling deleteFeatureStrategy.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling deleteFeatureStrategy.');
        }

        if (requestParameters.strategyId === null || requestParameters.strategyId === undefined) {
            throw new runtime.RequiredError('strategyId','Required parameter requestParameters.strategyId was null or undefined when calling deleteFeatureStrategy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"strategyId"}}`, encodeURIComponent(String(requestParameters.strategyId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteFeatureStrategy(requestParameters: DeleteFeatureStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFeatureStrategyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllFeatureTypesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureTypesSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/feature-types`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureTypesSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getAllFeatureTypes(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureTypesSchema> {
        const response = await this.getAllFeatureTypesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllTogglesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeaturesSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/features`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeaturesSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getAllToggles(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeaturesSchema> {
        const response = await this.getAllTogglesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getFeatureRaw(requestParameters: GetFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureSchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getFeature.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling getFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getFeature(requestParameters: GetFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureSchema> {
        const response = await this.getFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFeatureEnvironmentRaw(requestParameters: GetFeatureEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureEnvironmentSchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getFeatureEnvironment.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling getFeatureEnvironment.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling getFeatureEnvironment.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureEnvironmentSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getFeatureEnvironment(requestParameters: GetFeatureEnvironmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureEnvironmentSchema> {
        const response = await this.getFeatureEnvironmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFeatureStrategiesRaw(requestParameters: GetFeatureStrategiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureStrategySchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getFeatureStrategies.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling getFeatureStrategies.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling getFeatureStrategies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureStrategySchemaFromJSON(jsonValue));
    }

    /**
     */
    async getFeatureStrategies(requestParameters: GetFeatureStrategiesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureStrategySchema> {
        const response = await this.getFeatureStrategiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFeatureStrategyRaw(requestParameters: GetFeatureStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureStrategySchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getFeatureStrategy.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling getFeatureStrategy.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling getFeatureStrategy.');
        }

        if (requestParameters.strategyId === null || requestParameters.strategyId === undefined) {
            throw new runtime.RequiredError('strategyId','Required parameter requestParameters.strategyId was null or undefined when calling getFeatureStrategy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"strategyId"}}`, encodeURIComponent(String(requestParameters.strategyId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureStrategySchemaFromJSON(jsonValue));
    }

    /**
     */
    async getFeatureStrategy(requestParameters: GetFeatureStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureStrategySchema> {
        const response = await this.getFeatureStrategyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFeatureVariantsRaw(requestParameters: GetFeatureVariantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureVariantsSchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getFeatureVariants.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling getFeatureVariants.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}/variants`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureVariantsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getFeatureVariants(requestParameters: GetFeatureVariantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureVariantsSchema> {
        const response = await this.getFeatureVariantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFeaturesRaw(requestParameters: GetFeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeaturesSchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getFeatures.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeaturesSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getFeatures(requestParameters: GetFeaturesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeaturesSchema> {
        const response = await this.getFeaturesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listTagsRaw(requestParameters: ListTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagsSchema>> {
        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling listTags.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/features/{featureName}/tags`.replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async listTags(requestParameters: ListTagsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagsSchema> {
        const response = await this.listTagsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async overwriteFeatureVariantsRaw(requestParameters: OverwriteFeatureVariantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureVariantsSchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling overwriteFeatureVariants.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling overwriteFeatureVariants.');
        }

        if (requestParameters.variantSchema === null || requestParameters.variantSchema === undefined) {
            throw new runtime.RequiredError('variantSchema','Required parameter requestParameters.variantSchema was null or undefined when calling overwriteFeatureVariants.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}/variants`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.variantSchema.map(VariantSchemaToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureVariantsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async overwriteFeatureVariants(requestParameters: OverwriteFeatureVariantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureVariantsSchema> {
        const response = await this.overwriteFeatureVariantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async patchFeatureRaw(requestParameters: PatchFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureSchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling patchFeature.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling patchFeature.');
        }

        if (requestParameters.patchSchema === null || requestParameters.patchSchema === undefined) {
            throw new runtime.RequiredError('patchSchema','Required parameter requestParameters.patchSchema was null or undefined when calling patchFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.patchSchema.map(PatchSchemaToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureSchemaFromJSON(jsonValue));
    }

    /**
     */
    async patchFeature(requestParameters: PatchFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureSchema> {
        const response = await this.patchFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async patchFeatureStrategyRaw(requestParameters: PatchFeatureStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureStrategySchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling patchFeatureStrategy.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling patchFeatureStrategy.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling patchFeatureStrategy.');
        }

        if (requestParameters.strategyId === null || requestParameters.strategyId === undefined) {
            throw new runtime.RequiredError('strategyId','Required parameter requestParameters.strategyId was null or undefined when calling patchFeatureStrategy.');
        }

        if (requestParameters.patchSchema === null || requestParameters.patchSchema === undefined) {
            throw new runtime.RequiredError('patchSchema','Required parameter requestParameters.patchSchema was null or undefined when calling patchFeatureStrategy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"strategyId"}}`, encodeURIComponent(String(requestParameters.strategyId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.patchSchema.map(PatchSchemaToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureStrategySchemaFromJSON(jsonValue));
    }

    /**
     */
    async patchFeatureStrategy(requestParameters: PatchFeatureStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureStrategySchema> {
        const response = await this.patchFeatureStrategyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async patchFeatureVariantsRaw(requestParameters: PatchFeatureVariantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureVariantsSchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling patchFeatureVariants.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling patchFeatureVariants.');
        }

        if (requestParameters.patchSchema === null || requestParameters.patchSchema === undefined) {
            throw new runtime.RequiredError('patchSchema','Required parameter requestParameters.patchSchema was null or undefined when calling patchFeatureVariants.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}/variants`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.patchSchema.map(PatchSchemaToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureVariantsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async patchFeatureVariants(requestParameters: PatchFeatureVariantsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureVariantsSchema> {
        const response = await this.patchFeatureVariantsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async removeTagRaw(requestParameters: RemoveTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling removeTag.');
        }

        if (requestParameters.type === null || requestParameters.type === undefined) {
            throw new runtime.RequiredError('type','Required parameter requestParameters.type was null or undefined when calling removeTag.');
        }

        if (requestParameters.value === null || requestParameters.value === undefined) {
            throw new runtime.RequiredError('value','Required parameter requestParameters.value was null or undefined when calling removeTag.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/features/{featureName}/tags/{type}/{value}`.replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))).replace(`{${"type"}}`, encodeURIComponent(String(requestParameters.type))).replace(`{${"value"}}`, encodeURIComponent(String(requestParameters.value))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeTag(requestParameters: RemoveTagRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeTagRaw(requestParameters, initOverrides);
    }

    /**
     */
    async setStrategySortOrderRaw(requestParameters: SetStrategySortOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling setStrategySortOrder.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling setStrategySortOrder.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling setStrategySortOrder.');
        }

        if (requestParameters.setStrategySortOrderSchemaInner === null || requestParameters.setStrategySortOrderSchemaInner === undefined) {
            throw new runtime.RequiredError('setStrategySortOrderSchemaInner','Required parameter requestParameters.setStrategySortOrderSchemaInner was null or undefined when calling setStrategySortOrder.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/set-sort-order`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.setStrategySortOrderSchemaInner.map(SetStrategySortOrderSchemaInnerToJSON),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async setStrategySortOrder(requestParameters: SetStrategySortOrderRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setStrategySortOrderRaw(requestParameters, initOverrides);
    }

    /**
     */
    async toggleFeatureEnvironmentOffRaw(requestParameters: ToggleFeatureEnvironmentOffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureSchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling toggleFeatureEnvironmentOff.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling toggleFeatureEnvironmentOff.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling toggleFeatureEnvironmentOff.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/off`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureSchemaFromJSON(jsonValue));
    }

    /**
     */
    async toggleFeatureEnvironmentOff(requestParameters: ToggleFeatureEnvironmentOffRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureSchema> {
        const response = await this.toggleFeatureEnvironmentOffRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async toggleFeatureEnvironmentOnRaw(requestParameters: ToggleFeatureEnvironmentOnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureSchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling toggleFeatureEnvironmentOn.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling toggleFeatureEnvironmentOn.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling toggleFeatureEnvironmentOn.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/on`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureSchemaFromJSON(jsonValue));
    }

    /**
     */
    async toggleFeatureEnvironmentOn(requestParameters: ToggleFeatureEnvironmentOnRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureSchema> {
        const response = await this.toggleFeatureEnvironmentOnRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateFeatureRaw(requestParameters: UpdateFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureSchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling updateFeature.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling updateFeature.');
        }

        if (requestParameters.updateFeatureSchema === null || requestParameters.updateFeatureSchema === undefined) {
            throw new runtime.RequiredError('updateFeatureSchema','Required parameter requestParameters.updateFeatureSchema was null or undefined when calling updateFeature.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFeatureSchemaToJSON(requestParameters.updateFeatureSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureSchemaFromJSON(jsonValue));
    }

    /**
     */
    async updateFeature(requestParameters: UpdateFeatureRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureSchema> {
        const response = await this.updateFeatureRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateFeatureStrategyRaw(requestParameters: UpdateFeatureStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureStrategySchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling updateFeatureStrategy.');
        }

        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling updateFeatureStrategy.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling updateFeatureStrategy.');
        }

        if (requestParameters.strategyId === null || requestParameters.strategyId === undefined) {
            throw new runtime.RequiredError('strategyId','Required parameter requestParameters.strategyId was null or undefined when calling updateFeatureStrategy.');
        }

        if (requestParameters.updateFeatureStrategySchema === null || requestParameters.updateFeatureStrategySchema === undefined) {
            throw new runtime.RequiredError('updateFeatureStrategySchema','Required parameter requestParameters.updateFeatureStrategySchema was null or undefined when calling updateFeatureStrategy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/features/{featureName}/environments/{environment}/strategies/{strategyId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))).replace(`{${"strategyId"}}`, encodeURIComponent(String(requestParameters.strategyId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFeatureStrategySchemaToJSON(requestParameters.updateFeatureStrategySchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureStrategySchemaFromJSON(jsonValue));
    }

    /**
     */
    async updateFeatureStrategy(requestParameters: UpdateFeatureStrategyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureStrategySchema> {
        const response = await this.updateFeatureStrategyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async validateConstraintRaw(requestParameters: ValidateConstraintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.constraintSchema === null || requestParameters.constraintSchema === undefined) {
            throw new runtime.RequiredError('constraintSchema','Required parameter requestParameters.constraintSchema was null or undefined when calling validateConstraint.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/constraints/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConstraintSchemaToJSON(requestParameters.constraintSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async validateConstraint(requestParameters: ValidateConstraintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.validateConstraintRaw(requestParameters, initOverrides);
    }

    /**
     */
    async validateFeatureRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/features/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async validateFeature(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.validateFeatureRaw(initOverrides);
    }

}
