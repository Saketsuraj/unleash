/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiTokenSchema,
  ApiTokensSchema,
  CreateApiTokenSchema,
  UpdateApiTokenSchema,
} from '../models';
import {
    ApiTokenSchemaFromJSON,
    ApiTokenSchemaToJSON,
    ApiTokensSchemaFromJSON,
    ApiTokensSchemaToJSON,
    CreateApiTokenSchemaFromJSON,
    CreateApiTokenSchemaToJSON,
    UpdateApiTokenSchemaFromJSON,
    UpdateApiTokenSchemaToJSON,
} from '../models';

export interface CreateApiTokenRequest {
    createApiTokenSchema: CreateApiTokenSchema;
}

export interface DeleteApiTokenRequest {
    token: string;
}

export interface UpdateApiTokenRequest {
    token: string;
    updateApiTokenSchema: UpdateApiTokenSchema;
}

/**
 * 
 */
export class APITokensApi extends runtime.BaseAPI {

    /**
     */
    async createApiTokenRaw(requestParameters: CreateApiTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTokenSchema>> {
        if (requestParameters.createApiTokenSchema === null || requestParameters.createApiTokenSchema === undefined) {
            throw new runtime.RequiredError('createApiTokenSchema','Required parameter requestParameters.createApiTokenSchema was null or undefined when calling createApiToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/api-tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateApiTokenSchemaToJSON(requestParameters.createApiTokenSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTokenSchemaFromJSON(jsonValue));
    }

    /**
     */
    async createApiToken(requestParameters: CreateApiTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTokenSchema> {
        const response = await this.createApiTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteApiTokenRaw(requestParameters: DeleteApiTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling deleteApiToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/api-tokens/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteApiToken(requestParameters: DeleteApiTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApiTokenRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getAllApiTokensRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTokensSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/api-tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTokensSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getAllApiTokens(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTokensSchema> {
        const response = await this.getAllApiTokensRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async updateApiTokenRaw(requestParameters: UpdateApiTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.token === null || requestParameters.token === undefined) {
            throw new runtime.RequiredError('token','Required parameter requestParameters.token was null or undefined when calling updateApiToken.');
        }

        if (requestParameters.updateApiTokenSchema === null || requestParameters.updateApiTokenSchema === undefined) {
            throw new runtime.RequiredError('updateApiTokenSchema','Required parameter requestParameters.updateApiTokenSchema was null or undefined when calling updateApiToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/api-tokens/{token}`.replace(`{${"token"}}`, encodeURIComponent(String(requestParameters.token))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateApiTokenSchemaToJSON(requestParameters.updateApiTokenSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async updateApiToken(requestParameters: UpdateApiTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateApiTokenRaw(requestParameters, initOverrides);
    }

}
