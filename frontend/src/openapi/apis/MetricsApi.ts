/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApplicationSchema,
  ApplicationsSchema,
  FeatureMetricsSchema,
  FeatureUsageSchema,
} from '../models';
import {
    ApplicationSchemaFromJSON,
    ApplicationSchemaToJSON,
    ApplicationsSchemaFromJSON,
    ApplicationsSchemaToJSON,
    FeatureMetricsSchemaFromJSON,
    FeatureMetricsSchemaToJSON,
    FeatureUsageSchemaFromJSON,
    FeatureUsageSchemaToJSON,
} from '../models';

export interface CreateApplicationRequest {
    appName: string;
    applicationSchema: ApplicationSchema;
}

export interface DeleteApplicationRequest {
    appName: string;
}

export interface GetApplicationRequest {
    appName: string;
}

export interface GetFeatureUsageSummaryRequest {
    name: string;
}

export interface GetRawFeatureMetricsRequest {
    name: string;
}

/**
 * 
 */
export class MetricsApi extends runtime.BaseAPI {

    /**
     */
    async createApplicationRaw(requestParameters: CreateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling createApplication.');
        }

        if (requestParameters.applicationSchema === null || requestParameters.applicationSchema === undefined) {
            throw new runtime.RequiredError('applicationSchema','Required parameter requestParameters.applicationSchema was null or undefined when calling createApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/metrics/applications/{appName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApplicationSchemaToJSON(requestParameters.applicationSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async createApplication(requestParameters: CreateApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.createApplicationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteApplicationRaw(requestParameters: DeleteApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling deleteApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/metrics/applications/{appName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteApplication(requestParameters: DeleteApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteApplicationRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getApplicationRaw(requestParameters: GetApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationSchema>> {
        if (requestParameters.appName === null || requestParameters.appName === undefined) {
            throw new runtime.RequiredError('appName','Required parameter requestParameters.appName was null or undefined when calling getApplication.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/metrics/applications/{appName}`.replace(`{${"appName"}}`, encodeURIComponent(String(requestParameters.appName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getApplication(requestParameters: GetApplicationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationSchema> {
        const response = await this.getApplicationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getApplicationsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApplicationsSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/metrics/applications`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApplicationsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getApplications(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApplicationsSchema> {
        const response = await this.getApplicationsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getFeatureUsageSummaryRaw(requestParameters: GetFeatureUsageSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureUsageSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getFeatureUsageSummary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/client-metrics/features/{name}`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureUsageSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getFeatureUsageSummary(requestParameters: GetFeatureUsageSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureUsageSchema> {
        const response = await this.getFeatureUsageSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getRawFeatureMetricsRaw(requestParameters: GetRawFeatureMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureMetricsSchema>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling getRawFeatureMetrics.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/client-metrics/features/{name}/raw`.replace(`{${"name"}}`, encodeURIComponent(String(requestParameters.name))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureMetricsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getRawFeatureMetrics(requestParameters: GetRawFeatureMetricsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureMetricsSchema> {
        const response = await this.getRawFeatureMetricsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
