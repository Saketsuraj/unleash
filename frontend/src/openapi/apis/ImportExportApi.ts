/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StateSchema,
} from '../models';
import {
    StateSchemaFromJSON,
    StateSchemaToJSON,
} from '../models';

export interface ExportRequest {
    format?: ExportFormatEnum;
    download?: ExportDownloadParameter;
    strategies?: ExportDownloadParameter;
    featureToggles?: ExportDownloadParameter;
    projects?: ExportDownloadParameter;
    tags?: ExportDownloadParameter;
    environments?: ExportDownloadParameter;
}

export interface ImportRequest {
    requestBody: { [key: string]: any; };
}

/**
 * 
 */
export class ImportExportApi extends runtime.BaseAPI {

    /**
     */
    async _exportRaw(requestParameters: ExportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StateSchema>> {
        const queryParameters: any = {};

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.download !== undefined) {
            queryParameters['download'] = requestParameters.download;
        }

        if (requestParameters.strategies !== undefined) {
            queryParameters['strategies'] = requestParameters.strategies;
        }

        if (requestParameters.featureToggles !== undefined) {
            queryParameters['featureToggles'] = requestParameters.featureToggles;
        }

        if (requestParameters.projects !== undefined) {
            queryParameters['projects'] = requestParameters.projects;
        }

        if (requestParameters.tags !== undefined) {
            queryParameters['tags'] = requestParameters.tags;
        }

        if (requestParameters.environments !== undefined) {
            queryParameters['environments'] = requestParameters.environments;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/state/export`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StateSchemaFromJSON(jsonValue));
    }

    /**
     */
    async _export(requestParameters: ExportRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StateSchema> {
        const response = await this._exportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async _importRaw(requestParameters: ImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling _import.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/state/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async _import(requestParameters: ImportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this._importRaw(requestParameters, initOverrides);
    }

}

/**
 * @export
 */
export const ExportFormatEnum = {
    Json: 'json',
    Yaml: 'yaml'
} as const;
export type ExportFormatEnum = typeof ExportFormatEnum[keyof typeof ExportFormatEnum];
