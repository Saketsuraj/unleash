/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PlaygroundRequestSchema,
  PlaygroundResponseSchema,
} from '../models';
import {
    PlaygroundRequestSchemaFromJSON,
    PlaygroundRequestSchemaToJSON,
    PlaygroundResponseSchemaFromJSON,
    PlaygroundResponseSchemaToJSON,
} from '../models';

export interface GetPlaygroundRequest {
    playgroundRequestSchema: PlaygroundRequestSchema;
}

/**
 * 
 */
export class PlaygroundApi extends runtime.BaseAPI {

    /**
     * Use the provided `context`, `environment`, and `projects` to evaluate toggles on this Unleash instance. Returns a list of all toggles that match the parameters and what they evaluate to. The response also contains the input parameters that were provided.
     * Evaluate an Unleash context against a set of environments and projects.
     */
    async getPlaygroundRaw(requestParameters: GetPlaygroundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlaygroundResponseSchema>> {
        if (requestParameters.playgroundRequestSchema === null || requestParameters.playgroundRequestSchema === undefined) {
            throw new runtime.RequiredError('playgroundRequestSchema','Required parameter requestParameters.playgroundRequestSchema was null or undefined when calling getPlayground.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/playground`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PlaygroundRequestSchemaToJSON(requestParameters.playgroundRequestSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlaygroundResponseSchemaFromJSON(jsonValue));
    }

    /**
     * Use the provided `context`, `environment`, and `projects` to evaluate toggles on this Unleash instance. Returns a list of all toggles that match the parameters and what they evaluate to. The response also contains the input parameters that were provided.
     * Evaluate an Unleash context against a set of environments and projects.
     */
    async getPlayground(requestParameters: GetPlaygroundRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlaygroundResponseSchema> {
        const response = await this.getPlaygroundRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
