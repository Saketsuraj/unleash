/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  EventsSchema,
  FeatureEventsSchema,
  SearchEventsSchema,
} from '../models';
import {
    EventsSchemaFromJSON,
    EventsSchemaToJSON,
    FeatureEventsSchemaFromJSON,
    FeatureEventsSchemaToJSON,
    SearchEventsSchemaFromJSON,
    SearchEventsSchemaToJSON,
} from '../models';

export interface GetEventsRequest {
    project?: string;
}

export interface GetEventsForToggleRequest {
    featureName: string;
}

export interface SearchEventsRequest {
    searchEventsSchema: SearchEventsSchema;
}

/**
 * 
 */
export class EventsApi extends runtime.BaseAPI {

    /**
     * Returns **the last 100** from the Unleash instance when called without a query parameter. When called with a `project` parameter, returns **all events** for the specified project.  If the provided project does not exist, the list of events will be empty.
     * Get the most recent events from the Unleash instance or all events related to a project.
     */
    async getEventsRaw(requestParameters: GetEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventsSchema>> {
        const queryParameters: any = {};

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/events`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventsSchemaFromJSON(jsonValue));
    }

    /**
     * Returns **the last 100** from the Unleash instance when called without a query parameter. When called with a `project` parameter, returns **all events** for the specified project.  If the provided project does not exist, the list of events will be empty.
     * Get the most recent events from the Unleash instance or all events related to a project.
     */
    async getEvents(requestParameters: GetEventsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventsSchema> {
        const response = await this.getEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all events related to the specified feature toggle. If the feature toggle does not exist, the list of events will be empty.
     * Get all events related to a specific feature toggle.
     */
    async getEventsForToggleRaw(requestParameters: GetEventsForToggleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeatureEventsSchema>> {
        if (requestParameters.featureName === null || requestParameters.featureName === undefined) {
            throw new runtime.RequiredError('featureName','Required parameter requestParameters.featureName was null or undefined when calling getEventsForToggle.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/events/{featureName}`.replace(`{${"featureName"}}`, encodeURIComponent(String(requestParameters.featureName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeatureEventsSchemaFromJSON(jsonValue));
    }

    /**
     * Returns all events related to the specified feature toggle. If the feature toggle does not exist, the list of events will be empty.
     * Get all events related to a specific feature toggle.
     */
    async getEventsForToggle(requestParameters: GetEventsForToggleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeatureEventsSchema> {
        const response = await this.getEventsForToggleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchEventsRaw(requestParameters: SearchEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventsSchema>> {
        if (requestParameters.searchEventsSchema === null || requestParameters.searchEventsSchema === undefined) {
            throw new runtime.RequiredError('searchEventsSchema','Required parameter requestParameters.searchEventsSchema was null or undefined when calling searchEvents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/events/search`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SearchEventsSchemaToJSON(requestParameters.searchEventsSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async searchEvents(requestParameters: SearchEventsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventsSchema> {
        const response = await this.searchEventsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
