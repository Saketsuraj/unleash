/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HealthOverviewSchema,
  HealthReportSchema,
  ProjectEnvironmentSchema,
  ProjectsSchema,
} from '../models';
import {
    HealthOverviewSchemaFromJSON,
    HealthOverviewSchemaToJSON,
    HealthReportSchemaFromJSON,
    HealthReportSchemaToJSON,
    ProjectEnvironmentSchemaFromJSON,
    ProjectEnvironmentSchemaToJSON,
    ProjectsSchemaFromJSON,
    ProjectsSchemaToJSON,
} from '../models';

export interface AddEnvironmentToProjectRequest {
    projectId: string;
    projectEnvironmentSchema: ProjectEnvironmentSchema;
}

export interface GetProjectHealthOverviewRequest {
    projectId: string;
}

export interface GetProjectHealthReportRequest {
    projectId: string;
}

export interface RemoveEnvironmentFromProjectRequest {
    projectId: string;
    environment: string;
}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI {

    /**
     */
    async addEnvironmentToProjectRaw(requestParameters: AddEnvironmentToProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling addEnvironmentToProject.');
        }

        if (requestParameters.projectEnvironmentSchema === null || requestParameters.projectEnvironmentSchema === undefined) {
            throw new runtime.RequiredError('projectEnvironmentSchema','Required parameter requestParameters.projectEnvironmentSchema was null or undefined when calling addEnvironmentToProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/environments`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectEnvironmentSchemaToJSON(requestParameters.projectEnvironmentSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async addEnvironmentToProject(requestParameters: AddEnvironmentToProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addEnvironmentToProjectRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getProjectHealthOverviewRaw(requestParameters: GetProjectHealthOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthOverviewSchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProjectHealthOverview.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthOverviewSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getProjectHealthOverview(requestParameters: GetProjectHealthOverviewRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthOverviewSchema> {
        const response = await this.getProjectHealthOverviewRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProjectHealthReportRaw(requestParameters: GetProjectHealthReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<HealthReportSchema>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling getProjectHealthReport.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/health-report`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => HealthReportSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getProjectHealthReport(requestParameters: GetProjectHealthReportRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<HealthReportSchema> {
        const response = await this.getProjectHealthReportRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getProjectsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProjectsSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectsSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getProjects(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProjectsSchema> {
        const response = await this.getProjectsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async removeEnvironmentFromProjectRaw(requestParameters: RemoveEnvironmentFromProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.projectId === null || requestParameters.projectId === undefined) {
            throw new runtime.RequiredError('projectId','Required parameter requestParameters.projectId was null or undefined when calling removeEnvironmentFromProject.');
        }

        if (requestParameters.environment === null || requestParameters.environment === undefined) {
            throw new runtime.RequiredError('environment','Required parameter requestParameters.environment was null or undefined when calling removeEnvironmentFromProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/projects/{projectId}/environments/{environment}`.replace(`{${"projectId"}}`, encodeURIComponent(String(requestParameters.projectId))).replace(`{${"environment"}}`, encodeURIComponent(String(requestParameters.environment))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async removeEnvironmentFromProject(requestParameters: RemoveEnvironmentFromProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.removeEnvironmentFromProjectRaw(requestParameters, initOverrides);
    }

}
