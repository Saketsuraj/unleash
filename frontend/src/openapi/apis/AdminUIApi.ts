/* tslint:disable */
/* eslint-disable */
/**
 * Unleash API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 4.15.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  FeedbackSchema,
  SetUiConfigSchema,
  SplashSchema,
  UiConfigSchema,
} from '../models';
import {
    FeedbackSchemaFromJSON,
    FeedbackSchemaToJSON,
    SetUiConfigSchemaFromJSON,
    SetUiConfigSchemaToJSON,
    SplashSchemaFromJSON,
    SplashSchemaToJSON,
    UiConfigSchemaFromJSON,
    UiConfigSchemaToJSON,
} from '../models';

export interface CreateFeedbackRequest {
    feedbackSchema: FeedbackSchema;
}

export interface SetUiConfigRequest {
    setUiConfigSchema: SetUiConfigSchema;
}

export interface UpdateFeedbackRequest {
    id: string;
    feedbackSchema: FeedbackSchema;
}

export interface UpdateSplashSettingsRequest {
    id: string;
}

/**
 * 
 */
export class AdminUIApi extends runtime.BaseAPI {

    /**
     */
    async createFeedbackRaw(requestParameters: CreateFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedbackSchema>> {
        if (requestParameters.feedbackSchema === null || requestParameters.feedbackSchema === undefined) {
            throw new runtime.RequiredError('feedbackSchema','Required parameter requestParameters.feedbackSchema was null or undefined when calling createFeedback.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/feedback`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FeedbackSchemaToJSON(requestParameters.feedbackSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackSchemaFromJSON(jsonValue));
    }

    /**
     */
    async createFeedback(requestParameters: CreateFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedbackSchema> {
        const response = await this.createFeedbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUiConfigRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UiConfigSchema>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/ui-config`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UiConfigSchemaFromJSON(jsonValue));
    }

    /**
     */
    async getUiConfig(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UiConfigSchema> {
        const response = await this.getUiConfigRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async setUiConfigRaw(requestParameters: SetUiConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.setUiConfigSchema === null || requestParameters.setUiConfigSchema === undefined) {
            throw new runtime.RequiredError('setUiConfigSchema','Required parameter requestParameters.setUiConfigSchema was null or undefined when calling setUiConfig.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/ui-config`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SetUiConfigSchemaToJSON(requestParameters.setUiConfigSchema),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async setUiConfig(requestParameters: SetUiConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setUiConfigRaw(requestParameters, initOverrides);
    }

    /**
     */
    async updateFeedbackRaw(requestParameters: UpdateFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedbackSchema>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFeedback.');
        }

        if (requestParameters.feedbackSchema === null || requestParameters.feedbackSchema === undefined) {
            throw new runtime.RequiredError('feedbackSchema','Required parameter requestParameters.feedbackSchema was null or undefined when calling updateFeedback.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/feedback/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FeedbackSchemaToJSON(requestParameters.feedbackSchema),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedbackSchemaFromJSON(jsonValue));
    }

    /**
     */
    async updateFeedback(requestParameters: UpdateFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedbackSchema> {
        const response = await this.updateFeedbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateSplashSettingsRaw(requestParameters: UpdateSplashSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SplashSchema>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSplashSettings.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // apiKey authentication
        }

        const response = await this.request({
            path: `/api/admin/splash/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SplashSchemaFromJSON(jsonValue));
    }

    /**
     */
    async updateSplashSettings(requestParameters: UpdateSplashSettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SplashSchema> {
        const response = await this.updateSplashSettingsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
